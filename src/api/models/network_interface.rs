// Firecracker API
//
// RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying
// JSON modeled data. The transport medium is a Unix Domain Socket.
//
// OpenAPI spec version: 1.2.0
// Contact: compute-capsule@amazon.com
// Generated by: https://github.com/swagger-api/swagger-codegen.git

/// NetworkInterface : Defines a network interface.
use crate::api::RateLimiter;

use serde_derive::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct NetworkInterface {
    #[serde(rename = "guest_mac")]
    guest_mac: Option<String>,
    /// Host level path for the guest network interface
    #[serde(rename = "host_dev_name")]
    host_dev_name: String,
    #[serde(rename = "iface_id")]
    iface_id: String,
    #[serde(rename = "rx_rate_limiter")]
    rx_rate_limiter: Option<RateLimiter>,
    #[serde(rename = "tx_rate_limiter")]
    tx_rate_limiter: Option<RateLimiter>,
}

impl NetworkInterface {
    /// Defines a network interface.
    pub fn new(host_dev_name: String, iface_id: String) -> NetworkInterface {
        NetworkInterface {
            guest_mac: None,
            host_dev_name,
            iface_id,
            rx_rate_limiter: None,
            tx_rate_limiter: None,
        }
    }

    pub fn set_guest_mac(&mut self, guest_mac: String) {
        self.guest_mac = Some(guest_mac);
    }

    pub fn with_guest_mac(mut self, guest_mac: String) -> NetworkInterface {
        self.guest_mac = Some(guest_mac);
        self
    }

    pub fn guest_mac(&self) -> Option<&String> {
        self.guest_mac.as_ref()
    }

    pub fn reset_guest_mac(&mut self) {
        self.guest_mac = None;
    }

    pub fn set_host_dev_name(&mut self, host_dev_name: String) {
        self.host_dev_name = host_dev_name;
    }

    pub fn with_host_dev_name(mut self, host_dev_name: String) -> NetworkInterface {
        self.host_dev_name = host_dev_name;
        self
    }

    pub fn host_dev_name(&self) -> &String {
        &self.host_dev_name
    }

    pub fn set_iface_id(&mut self, iface_id: String) {
        self.iface_id = iface_id;
    }

    pub fn with_iface_id(mut self, iface_id: String) -> NetworkInterface {
        self.iface_id = iface_id;
        self
    }

    pub fn iface_id(&self) -> &String {
        &self.iface_id
    }

    pub fn set_rx_rate_limiter(&mut self, rx_rate_limiter: RateLimiter) {
        self.rx_rate_limiter = Some(rx_rate_limiter);
    }

    pub fn with_rx_rate_limiter(mut self, rx_rate_limiter: RateLimiter) -> NetworkInterface {
        self.rx_rate_limiter = Some(rx_rate_limiter);
        self
    }

    pub fn rx_rate_limiter(&self) -> Option<&RateLimiter> {
        self.rx_rate_limiter.as_ref()
    }

    pub fn reset_rx_rate_limiter(&mut self) {
        self.rx_rate_limiter = None;
    }

    pub fn set_tx_rate_limiter(&mut self, tx_rate_limiter: RateLimiter) {
        self.tx_rate_limiter = Some(tx_rate_limiter);
    }

    pub fn with_tx_rate_limiter(mut self, tx_rate_limiter: RateLimiter) -> NetworkInterface {
        self.tx_rate_limiter = Some(tx_rate_limiter);
        self
    }

    pub fn tx_rate_limiter(&self) -> Option<&RateLimiter> {
        self.tx_rate_limiter.as_ref()
    }

    pub fn reset_tx_rate_limiter(&mut self) {
        self.tx_rate_limiter = None;
    }
}
